;; meme-wasm.wat
;; A tiny theatrical WebAssembly module with many lines "for the meme".
(module
  ;; --- memory & globals ---
  (memory (export "memory") 1)
  (global $meme_counter (mut i32) (i32.const 0))
  (global $flag (mut i32) (i32.const 0))

  ;; --- imports (no real host print, but left as optional import) ---
  (import "env" "host_log" (func $host_log (param i32 i32))) ;; optional host logging

  ;; --- basic arithmetic helpers ---
  (func $add (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.add)

  (func $sub (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.sub)

  (func $mul (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.mul)

  (func $div_s (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.div_s)

  ;; --- small utilities exported for host to call ---
  (func (export "inc_global") (param $x i32) (result i32)
    ;; increments meme_counter by x, returns new value
    global.get $meme_counter
    local.get $x
    i32.add
    global.set $meme_counter
    global.get $meme_counter)

  (func (export "get_global") (result i32)
    global.get $meme_counter)

  (func (export "set_flag") (param $v i32)
    local.get $v
    global.set $flag)

  (func (export "get_flag") (result i32)
    global.get $flag)

  ;; --- some "useful" composite ops ---
  (func $sum_of_three (param $a i32) (param $b i32) (param $c i32) (result i32)
    local.get $a
    local.get $b
    i32.add
    local.get $c
    i32.add)

  (func $scale_and_add (param $a i32) (param $b i32) (param $scale i32) (result i32)
    local.get $b
    local.get $scale
    i32.mul
    local.get $a
    i32.add)

  ;; --- data segment (some ASCII text in memory) ---
  (data (i32.const 16) "meme-wasm says hi!\00")
  (data (i32.const 64) "this is a theatrical wasm module for fun\00")

  ;; --- a "main-ish" operator that does a tiny stateful op ---
  (func (export "do_a_thing") (param $x i32) (result i32)
    ;; do: global = (global + x) * (x % 3 + 1) - flag
    global.get $meme_counter
    local.get $x
    i32.add
    local.get $x
    i32.const 3
    i32.rem_s
    i32.const 1
    i32.add
    i32.mul
    global.get $flag
    i32.sub
    ;; update global
    tee_local $tmp
    ;; Because Wasm needs locals declared to use tee_local, we will declare a local:
  )

  ;; --- filler functions to increase line count and the "struggle" vibe ---
  ;; Each "meme_func_X" calls a basic helper or returns constants.
  (func $meme_func_001 (result i32) (i32.const 1))
  (func $meme_func_002 (result i32) (i32.const 2))
  (func $meme_func_003 (result i32) (i32.const 3))
  (func $meme_func_004 (result i32) (i32.const 4))
  (func $meme_func_005 (result i32) (i32.const 5))
  (func $meme_func_006 (result i32) (i32.const 6))
  (func $meme_func_007 (result i32) (i32.const 7))
  (func $meme_func_008 (result i32) (i32.const 8))
  (func $meme_func_009 (result i32) (i32.const 9))
  (func $meme_func_010 (result i32) (i32.const 10))

  (func $meme_func_011 (param $a i32) (result i32)
    local.get $a
    i32.const 42
    i32.add)

  (func $meme_func_012 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.xor)

  (func $meme_func_013 (param $a i32) (result i32)
    local.get $a
    i32.const 1
    i32.shl)

  (func $meme_func_014 (param $a i32) (result i32)
    local.get $a
    i32.const 1
    i32.shr_u)

  (func $meme_func_015 (param $a i32) (result i32)
    local.get $a
    i32.const -1
    i32.add)

  (func $meme_func_016 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    call $mul)

  (func $meme_func_017 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    call $add)

  (func $meme_func_018 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    call $sub)

  (func $meme_func_019 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    call $div_s)

  (func $meme_func_020 (result i32)
    i32.const 314159
    i32.const 271828
    i32.add)

  ;; --- longer tail of intentionally redundant functions (because meme) ---
  (func $meme_func_021 (result i32) (i32.const 21))
  (func $meme_func_022 (result i32) (i32.const 22))
  (func $meme_func_023 (result i32) (i32.const 23))
  (func $meme_func_024 (result i32) (i32.const 24))
  (func $meme_func_025 (result i32) (i32.const 25))
  (func $meme_func_026 (result i32) (i32.const 26))
  (func $meme_func_027 (result i32) (i32.const 27))
  (func $meme_func_028 (result i32) (i32.const 28))
  (func $meme_func_029 (result i32) (i32.const 29))
  (func $meme_func_030 (result i32) (i32.const 30))

  (func $meme_func_031 (param $a i32) (result i32) (local.get $a) (i32.const 1) (i32.add))
  (func $meme_func_032 (param $a i32) (result i32) (local.get $a) (i32.const 2) (i32.add))
  (func $meme_func_033 (param $a i32) (result i32) (local.get $a) (i32.const 3) (i32.add))
  (func $meme_func_034 (param $a i32) (result i32) (local.get $a) (i32.const 4) (i32.add))
  (func $meme_func_035 (param $a i32) (result i32) (local.get $a) (i32.const 5) (i32.add))

  ;; --- intentionally verbose no-op chain to inflate lines ---
  (func $noop_chain_001
    (local $i i32)
    i32.const 0
    local.set $i
    block
      loop
        local.get $i
        i32.const 10
        i32.lt_s
        if
          local.get $i
          i32.const 1
          i32.add
          local.set $i
          br 1
        end
        br 0
      end
    end)

  (func $noop_chain_002
    (local $x i32) (local $y i32)
    i32.const 7
    local.set $x
    i32.const 3
    local.set $y
    local.get $x
    local.get $y
    i32.add
    drop)

  ;; --- more "meme" one-liners ---
  (func $meme_func_036 (result i32) (i32.const 36))
  (func $meme_func_037 (result i32) (i32.const 37))
  (func $meme_func_038 (result i32) (i32.const 38))
  (func $meme_func_039 (result i32) (i32.const 39))
  (func $meme_func_040 (result i32) (i32.const 40))

  (func $meme_func_041 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.add)

  (func $meme_func_042 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.mul)

  (func $meme_func_043 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.sub)

  (func $meme_func_044 (param $a i32) (param $b i32) (result i32)
    local.get $a
    local.get $b
    i32.div_s)

  ;; --- pretend "complex algorithm" comprised of small steps ---
  (func (export "pretend_complex") (param $n i32) (result i32)
    (local $acc i32)
    (local $i i32)
    i32.const 0
    local.set $acc
    i32.const 0
    local.set $i
    block $exit
      loop $loop
        local.get $i
        local.get $n
        i32.ge_s
        br_if $exit
        local.get $acc
        local.get $i
        call $meme_func_016 ;; mul
        i32.add
        local.set $acc
        local.get $i
        i32.const 1
        i32.add
        local.set $i
        br $loop
      end
    end
    local.get $acc)

  ;; --- intentionally many repeated functions for "hard work" illusion ---
  (func $repeater_001 (param $a i32) (param $b i32) (result i32) local.get $a local.get $b i32.add)
  (func $repeater_002 (param $a i32) (param $b i32) (result i32) local.get $a local.get $b i32.sub)
  (func $repeater_003 (param $a i32) (param $b i32) (result i32) local.get $a local.get $b i32.mul)
  (func $repeater_004 (param $a i32) (param $b i32) (result i32) local.get $a local.get $b i32.div_s)
  (func $repeater_005 (param $a i32) (result i32) local.get $a i32.const 100 i32.add)

  (func $repeater_006 (param $a i32) (result i32) local.get $a i32.const 200 i32.add)
  (func $repeater_007 (param $a i32) (resu_
